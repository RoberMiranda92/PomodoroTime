//FROM https://nolambda.stream/posts/jacoco-setup-for-multi-module-project/
// https://medium.com/@fraggjkee/measuring-unit-test-coverage-in-multi-module-android-projects-using-jacoco-113d201ccb79
// https://medium.com/swlh/measuring-unit-test-coverage-in-multi-module-android-projects-using-jacoco-part-2-352ef949ecfb

def coveredProject = subprojects
apply from: 'dependencies.gradle'
apply plugin: 'jacoco'

configure(coveredProject) { prj ->
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = versions.jacoco_version
    }

    def isAndroid = prj.name != "domain"

    if (isAndroid) {
        task jacocoReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
            group = 'Reporting'
            description = 'Generate Jacoco coverage'

            reports {
                csv.enabled = true
                xml.enabled = true
                html.enabled = true
            }

            final fileFilter = ['android/*',
                                '**/BR.class',
                                '**/R.class',
                                '**/R$*.class',
                                '**/Manifest*.*',
                                'android/**/*.*',
                                '**/BuildConfig.*',
                                '**/*$ViewBinder*.*',
                                '**/*$ViewInjector*.*',
                                '**/Lambda$*.class',
                                '**/Lambda.class',
                                '**/*Lambda.class',
                                '**/*Lambda*.class',
                                '**/*Binding*.*',
                                '**/DataBinderMapperImpl*.*',
            ]

            final kotlinTree = fileTree(dir: "${prj.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
            final javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/debug", excludes: fileFilter)
            final mainSrc = "${prj.projectDir}/src/main/java"

            sourceDirectories.setFrom files([mainSrc])
            classDirectories.setFrom files([kotlinTree, javacTree])
            executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                    'jacoco/testDebugUnitTest.exec',
                    'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
            ])

            doLast() {
                print "file://${reports.html.destination}/index.html"
            }
        }
    } else {
        task jacocoReport(type: JacocoReport, dependsOn: ['test','jacocoTestReport' ]) {
            group = 'Reporting'
            description = 'Generate Jacoco coverage'

            reports {
                csv.enabled = true
                xml.enabled = true
                html.enabled = true
            }

            final fileFilter = []
            final mainSrc = "${prj.projectDir}/src/main/java"
            final kotlinTree = fileTree(dir: "${prj.buildDir}/classes/kotlin/main", excludes: fileFilter)

            sourceDirectories.setFrom files([mainSrc])
            classDirectories.setFrom files([kotlinTree])
            executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                    'jacoco/test.exec'
            ])

            doLast() {
                println "file://${reports.html.destination}/index.html"
            }
        }
    }
}

/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        ignoreFailures true
    }

    def projects = coveredProject

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)
    final execution = files(projects.jacocoReport.executionData)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom execution

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/html')
        }
        csv {
            enabled true
            destination file('build/reports/jacoco/jacocoFullReport.csv')
        }
        xml {
            enabled true
            destination file('build/reports/jacoco/jacocoFullReport.xml')
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })
    }

    doLast() {
        println "file://${reports.html.destination}/index.html"
    }
}